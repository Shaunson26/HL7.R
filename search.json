[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 HL7.NCIMS.R authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/Getting-started.html","id":"parsing-a-hl7","dir":"Articles","previous_headings":"","what":"Parsing a HL7","title":"Getting-started","text":"first problem package solves parsing HL7 messages nested list. function parse_hl7_message() parse HL7 file list. works single messages batch messages. parsed message, function try ’s best naming elements. simple top level elements (HL7 segments), bit cumbersome within list elements (HL7 segment fields). convention, fields referenced number (“fourth field MSH sending facility”), names can make things bit readable times. Repeated segments within message numbered output list e.g. OBX.1 OBX.2 (using Set ID value). Notes values imported text, conversion needs done downstream e.g datetimes filename attribute attached list object","code":""},{"path":"/articles/Getting-started.html","id":"single-hl7-message","dir":"Articles","previous_headings":"Parsing a HL7","what":"Single HL7 message","title":"Getting-started","text":"Use parse_hl7_message() file path. Traditionally indexes used, using named elements can help readability.","code":"hl7_file <- system.file(package = 'HL7.R', 'extdata/hl7-2.3.1.hl7')  hl7_list <- parse_hl7_message(hl7_file)  names(hl7_list) #> [1] \"MSH\"   \"PID\"   \"PV1\"   \"OBR\"   \"OBX.1\" \"OBX.2\" \"OBX.3\" \"OBX.4\"  # First 5 fields of these segments hl7_list$MSH[1:5] #> $EncodingCharacters #> [1] \"^~\\\\&\" #>  #> $SendingApplication #> [1] \"22-70047081\" #>  #> $SendingFacility #> [1] \"AN EXAMPLE LAB\" #>  #> $ReceivingApplication #> [1] \"NDD\" #>  #> $ReceivingFacility #> [1] \"NSW HEALTH\" hl7_list$PID[1:5] #> $SetID #> [1] \"\" #>  #> $PatientID #> [1] \"\" #>  #> $PatientIdentifierList #> [1] \"AN EXAMPLE LAB\" #>  #> $AlternatePatientIDPID #> [1] \"\" #>  #> $PatientName #> $PatientName$familyName #> [1] \"SIMPSON\" #>  #> $PatientName$givenName #> [1] \"HOMER\" # File from where data parsed attr(hl7_list, 'filename') #> [1] \"hl7-2.3.1.hl7\" with(hl7_list,      data.frame(        first_name = PID[[5]][[2]],        last_name = PID[[5]][[1]],        suburb = PID[[11]][[3]]      ) ) #>   first_name last_name      suburb #> 1      HOMER   SIMPSON SPRINGFIELD  with(hl7_list,      data.frame(        first_name = PID$PatientName$givenName,        last_name = PID$PatientName$familyName,        suburb = PID$PatientAddress$city      ) ) #>   first_name last_name      suburb #> 1      HOMER   SIMPSON SPRINGFIELD"},{"path":"/articles/Getting-started.html","id":"batch-hl7-message","dir":"Articles","previous_headings":"Parsing a HL7","what":"Batch HL7 message","title":"Getting-started","text":"parse_hl7_message() check batch headers parse appropriately. result list parsed messages.","code":"hl7_file <- system.file(package = 'HL7.R', 'extdata/fake-covid-batch.hl7')  hl7_list <- parse_hl7_message(hl7_file) #> Found 2 messages within file  # unnamed list of length of the number of messages length(hl7_list) #> [1] 2 names(hl7_list) #> NULL  # a single message lives within the list elements now names(hl7_list[[1]]) #> [1] \"MSH\"   \"PID\"   \"OBX.1\"  # accessing things hl7_list[[1]]$PID$PatientName #> $familyName #> [1] \"Homer\" #>  #> $givenName #> [1] \"Simpson\" hl7_list[[2]]$PID$PatientName #> $familyName #> [1] \"Ned\" #>  #> $givenName #> [1] \"Flanders\""},{"path":"/articles/Getting-started.html","id":"multiple-hl7-to-line-list","dir":"Articles","previous_headings":"Parsing a HL7","what":"Multiple HL7 to line list","title":"Getting-started","text":"Cycle file use parse_hl7_message()","code":"# Two HL7 files starting with 'fake' are distributed with this package,  hl7_files <-    system.file(package = 'HL7.R', 'extdata') %>%    list.files(pattern = 'fake-covid-\\\\d.hl7$', full.names = T)  basename(hl7_files) #> [1] \"fake-covid-1.hl7\" \"fake-covid-2.hl7\"  # Parse into list hl7_list <- lapply(hl7_files, parse_hl7_message)  length(hl7_list) #> [1] 2  # Equivalent result to a parsed batch HL7 hl7_list[[1]]$PID$PatientName #> $familyName #> [1] \"Homer\" #>  #> $givenName #> [1] \"Simpson\" hl7_list[[2]]$PID$PatientName #> $familyName #> [1] \"Ned\" #>  #> $givenName #> [1] \"Flanders\"  # el = list element in each loop lapply(hl7_list, function(el){      with(el,        data.frame(          first_name = PID$PatientName$givenName,          last_name = PID$PatientName$familyName,          suburb = PID$PatientAddress$city,          lab = MSH$SendingFacility,          test = OBX.1$ObservationIdentifier$text,          result = OBX.1$ObservationValue[[2]]        )   ) }) %>%    do.call(rbind.data.frame, .) #>   first_name last_name      suburb                     lab          test #> 1    Simpson     Homer Springfield      Dr Hibbert Medical nCoV-2019 PCR #> 2   Flanders       Ned Springfield Nick Riviera Appartment nCoV-2019 PCR #>     result #> 1  Postive #> 2 Negative"},{"path":"/articles/Getting-started.html","id":"creating-hl7-2-3-1","dir":"Articles","previous_headings":"","what":"Creating HL7 2.3.1","title":"Getting-started","text":"second problem package solves converting arbitrary piece data HL7 message. conducted piecing together segments message header (MSH), Patient identification (PID) Observation/Results (OBX). package provides segment functions e.g. MSH(), PID(), named parameters build text segment ready piecing together using function build_hl7(). Notes default blank values fields segment function, included final output shown last observed value .e. trailing blanks trimmed see parameter .trim functions helper functions *Components() nested fields. helpers, can safely skip can correctly create required value Dates/Datetimes can converted using datetime_to_hl7_datetime() Conversion Date Datetimes .trim trim trailing blank fields. TRUE default","code":"example_hl7_build <-   build_hl7(     MSH(SendingFacility = 'A lab', ReceivingFacility = 'NSW Health', VersionID = '2.3.1'),     PID(PatientID = '1234',          PatientName = PatientNameComponents(familyName = 'Ross',                                              givenName = 'Bob'),          PatientAddress = PatientAddressComponents(streetAddress = '123 Fake Street',                                                    city = 'Springfield',                                                   zipPostcode = '90120')),     OBX(SetID = 1,         ValueType = 'CE',         ObservationIdentifier = ObservationIdentifierComponents(identifier = 'NSW_LOINC-376',                                                                 text = 'nCoV-2019 PCR',                                                                 nameOfCodingSystem = 'LN'),         ObservationValue = variedComponents('260415000^Not Detected^SNOMED-CT'))   ) example_hl7_build #> MSH|^~\\&||A lab||NSW Health||||||2.3.1 #> PID||1234|||Ross^Bob||||||123 Fake Street^^Springfield^^90120 #> OBX|1|CE|NSW_LOINC-376^nCoV-2019 PCR^LN||260415000^Not Detected^SNOMED-CT datetime_to_hl7_datetime(Sys.time()) #> [1] \"20230110150249\" MSH(SendingFacility = 'NSW HEALTH', VersionID = '2.3.1') #> MSH|^~\\&||NSW HEALTH||||||||2.3.1 MSH(SendingFacility = 'NSW HEALTH', VersionID = '2.3.1', .trim = FALSE) #> MSH|^~\\&||NSW HEALTH||||||||2.3.1||||||||  PatientAddressComponents(streetAddress = '123 Fake Street') #> [1] \"123 Fake Street\" PatientAddressComponents(streetAddress = '123 Fake Street', .trim = FALSE) #> [1] \"123 Fake Street^^^^^\""},{"path":"/articles/Getting-started.html","id":"line-list-to-hl7","dir":"Articles","previous_headings":"Creating HL7 2.3.1","what":"Line list to HL7","title":"Getting-started","text":"Often task translating line list HL7 messages. simple example show : loop rows using lapply convert row list easy reference e.g. d$firstname","code":"# A 2 row line list with fake data is distributed with this package some_line_list <- read.csv(system.file(package = 'HL7.R', 'extdata/fake-covid-n2.csv')) some_line_list #>   firstname lastname                street      suburb test_id     text_text #> 1     Homer  Simpson 742 Evergreen Terrace Springfield  ncov19 nCoV-2019 PCR #> 2       Ned Flanders 744 Evergreen Terrace Springfield  ncov19 nCoV-2019 PCR #>   result_code result_text                facility #> 1           P     Postive      Dr Hibbert Medical #> 2           N    Negative Nick Riviera Appartment hl7_build_list <-   lapply(1:nrow(some_line_list), function(row){          # d = data element (the row, as a list)     d <- as.list(some_line_list[row,])          build_hl7(       MSH(SendingFacility = d$facility, ReceivingFacility = 'NSW Health', VersionID = '2.3.1'),       PID(PatientID = '1',            PatientName = PatientNameComponents(familyName = d$firstname,                                                givenName = d$lastname),            PatientAddress = PatientAddressComponents(streetAddress = d$street,                                                      city = d$suburb)),       OBX(SetID = 1,           ValueType = 'CE',           ObservationIdentifier = ObservationIdentifierComponents(identifier = d$test_id,                                                                   text = d$text_text,                                                                   nameOfCodingSystem = 'LN'),           ObservationValue = variedComponents(d$result_code, d$result_text))     )   }) hl7_build_list #> [[1]] #> MSH|^~\\&||Dr Hibbert Medical||NSW Health||||||2.3.1 #> PID||1|||Homer^Simpson||||||742 Evergreen Terrace^^Springfield #> OBX|1|CE|ncov19^nCoV-2019 PCR^LN||P^Postive #>  #> [[2]] #> MSH|^~\\&||Nick Riviera Appartment||NSW Health||||||2.3.1 #> PID||1|||Ned^Flanders||||||744 Evergreen Terrace^^Springfield #> OBX|1|CE|ncov19^nCoV-2019 PCR^LN||N^Negative # for filenames 001, 002, etc if necessary n_leading_zero <- sprintf('%%0%sd', nchar(length(hl7_build_list)))  # Output somewhere # * note this was used to make fake-covid-*.hl7 used above for(i in seq_along(hl7_build_list)){    i_leading_zero = sprintf(fmt = n_leading_zero, i)   filename = sprintf('Some-filename-%s.hl7', i_leading_zero)   path = file.path('some/path', filename)   writeLines(hl7_build_list[[i]], con = path) }"},{"path":"/articles/HL7-to-linelist-Gonorrhoea.html","id":"the-task","dir":"Articles","previous_headings":"","what":"The task","title":"HL7-to-linelist-Gonorrhoea","text":"Antibiotic resistance results needed extraction HL7 messages. multiple results within message. goal create table 1 row per result along personal sample identifiers.","code":""},{"path":"/articles/HL7-to-linelist-Gonorrhoea.html","id":"the-data","dir":"Articles","previous_headings":"","what":"The data","title":"HL7-to-linelist-Gonorrhoea","text":"2 Gonorrhoea HL7 files containing antibiotic resistance results within package.","code":"gonorrhoea_files <-   system.file('extdata', package = 'HL7.R') %>%    list.files(pattern = 'gonorrhoea', full.names = TRUE)  gonorrhoea_files #> [1] \"/home/runner/work/_temp/Library/HL7.R/extdata/gonorrhoea-1.hl7\"        \"/home/runner/work/_temp/Library/HL7.R/extdata/gonorrhoea-2.hl7\"        \"/home/runner/work/_temp/Library/HL7.R/extdata/gonorrhoea-3_2_bugs.hl7\" \"/home/runner/work/_temp/Library/HL7.R/extdata/gonorrhoea-3.hl7\"        #> [5] \"/home/runner/work/_temp/Library/HL7.R/extdata/gonorrhoea-4_2_bugs.hl7\""},{"path":"/articles/HL7-to-linelist-Gonorrhoea.html","id":"parsing","dir":"Articles","previous_headings":"","what":"Parsing","title":"HL7-to-linelist-Gonorrhoea","text":"messages parsed using HL7.R.","code":"gonorrhoea_parsed_list <-   lapply(gonorrhoea_files, parse_hl7_message)  # 2 elements (files), with 15 elements (segments) each length(gonorrhoea_parsed_list) #> [1] 5 sapply(gonorrhoea_parsed_list, length) #> [1] 15 15 24 24 22"},{"path":"/articles/HL7-to-linelist-Gonorrhoea.html","id":"data-wrangling","dir":"Articles","previous_headings":"","what":"Data-wrangling","title":"HL7-to-linelist-Gonorrhoea","text":"section explains several steps later combined single wrangle function. Thus, begin single parsed HL7.","code":"msg <- gonorrhoea_parsed_list[[4]]"},{"path":"/articles/HL7-to-linelist-Gonorrhoea.html","id":"extraction-function","dir":"Articles","previous_headings":"Data-wrangling","what":"Extraction function","title":"HL7-to-linelist-Gonorrhoea","text":"expect possibility completely missing fields parsing. sake example, let us pretend 5th element PatientName. Selection element missing produces error want return ‘blank’ value. function purrr::pluck allows default value list element found can roll regardless, save typing, create alias function.","code":"msg$PID$PatientName[[5]] #> Error in msg$PID$PatientName[[5]]: subscript out of bounds purrr::pluck(msg$PID$PatientName, 5) #> NULL purrr::pluck(msg$PID$PatientName, 5, .default = \"\") #> [1] \"\" my_pluck <- function(x, .default = ''){   tryCatch(x, error = function(e) '') }  my_pluck(msg$PID$PatientName[[5]]) #> [1] \"\" # and correct otherwise my_pluck(msg$PID$PatientName[[2]]) #> [1] \"HIJLK\" # p = purrr::pluck with .default = '' p <- function(x, ...){    purrr::pluck(x, ..., .default = '')  }"},{"path":"/articles/HL7-to-linelist-Gonorrhoea.html","id":"personal-identifiers","dir":"Articles","previous_headings":"Data-wrangling","what":"Personal identifiers","title":"HL7-to-linelist-Gonorrhoea","text":"Personal identifiers occur message. can safely extract pid data.frame object. Note use () save typing.","code":"pid <-   with(msg$PID, {     data.frame(       first_name    = p(PatientName, 2),       middle_name = p(PatientName, 3),       last_name = p(PatientName, 1),       street_address = p(PatientAddress, 1),       suburb = p(PatientAddress, 3),       state = p(PatientAddress, 4),       postcode = p(PatientAddress, 5),       dob = DateTimeOfBirth,       gender = Sex)   })  pid #>   first_name middle_name last_name street_address suburb state postcode          dob gender #> 1      HIJLK                 ABCDE                                 2010 199011190000      M"},{"path":"/articles/HL7-to-linelist-Gonorrhoea.html","id":"sample-number-and-date","dir":"Articles","previous_headings":"Data-wrangling","what":"Sample number and date","title":"HL7-to-linelist-Gonorrhoea","text":"Simple extraction observation request segment OBR.","code":"obr <-   with(msg$OBR, {     data.frame(specimen_number = p(FillerOrderNumber, 1),                specimen_date = p(RequestedDatetime, 1)     )   })  obr #>   specimen_number specimen_date #> 1      22R474259Q 20220722+1000"},{"path":"/articles/HL7-to-linelist-Gonorrhoea.html","id":"results-data","dir":"Articles","previous_headings":"Data-wrangling","what":"Results data","title":"HL7-to-linelist-Gonorrhoea","text":"part complex. data held among multiple OBX segments. need go extract certain parts, well conditionally output values depending find.","code":"obxs <- grep('OBX', names(msg))  obxs # indexes of OBX in message #>  [1]  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24"},{"path":"/articles/HL7-to-linelist-Gonorrhoea.html","id":"sample-site","dir":"Articles","previous_headings":"Data-wrangling > Results data","what":"Sample site","title":"HL7-to-linelist-Gonorrhoea","text":"Extract sample site following OBX segment: OBX|1|ST|M6706^Site^NATA1234|1|Urethra||||||F||0|202203171808+1000|JOHNWICK expect segment x$ValueType == 'ST' & x$ObservationIdentifier[[2]] == 'Site'. found extract p(x$ObservationValue, 1) (x selected segment) otherwise output \"\". Note ’ve used element names, positions also work: x[[2]] == 'ST' & x[[3]][[2]] == 'Site', x[[5]][[1]].","code":"obxs_st_site <-   sapply(msg[obxs], function(x){     x$ValueType == 'ST' & x$ObservationIdentifier[[2]] == 'Site'   })  if (any(obxs_st_site)) {   msg_site_ind <- obxs[obxs_st_site]   obx_site <- data.frame(site = p(msg[[msg_site_ind]]$ObservationValue, 1)) } else {   obx_site <- data.frame(site = NA_character_) }  obx_site #>            site #> 1 Urethral swab"},{"path":"/articles/HL7-to-linelist-Gonorrhoea.html","id":"antibiotic-resistance-results","dir":"Articles","previous_headings":"Data-wrangling > Results data","what":"Antibiotic resistance results","title":"HL7-to-linelist-Gonorrhoea","text":", look results act upon found, OBX|7|CE|18906-8^Ciprofloxacin Susc Islt^LN^M20007^Ciprofloxacin^NATA1234|7|S^Susceptible^L|... OBX|8|CE|18895-3^Ceftriaxone Susc Islt^LN^M20062^Ceftriaxone^NATA1234|8|S^Susceptible^L|... step returns NULL segments without hits, remove . wrangle results - row bind, complete results 2 test types, conversions. tests categorical outputs (susceptibility categories), others numerical (MIC) needed conversion.","code":"antibiotics_OR_grep <- \"Penicillin|Ciprofloxacin|Ceftriaxone|Azithromycin\"  obx_tmp <-   lapply(msg[obxs], function(x){          # TODO could examine code in position 1     # TODO could match values rather than string manipulation     obx_id <- p(x$ObservationIdentifier, 2)          if (grepl(pattern = antibiotics_OR_grep, x = obx_id, ignore.case = TRUE) ){              if (grepl(' Susc ', obx_id)) {                  data.frame(antibiotic = sub(' .*', '', obx_id),                    type = 'susceptibility',                    value = p(x$ObservationValue, 1))                } else if (grepl('MIC', obx_id)) {                  data.frame(antibiotic = sub(' .*', '', obx_id),                    type = 'mic',                    value = p(x$ObservationValue, 1))       }            }   })  is.not.null <- function(x) { !is.null(x) }  obx_not_nulls <- sapply(obx_tmp, is.not.null)  obx_tmp[obx_not_nulls] #> $OBX.9 #>   antibiotic           type value #> 1 Penicillin susceptibility     R #>  #> $OBX.10 #>      antibiotic           type value #> 1 Ciprofloxacin susceptibility     R #>  #> $OBX.11 #>    antibiotic           type value #> 1 Ceftriaxone susceptibility     S #>  #> $OBX.12 #>     antibiotic           type value #> 1 Azithromycin susceptibility     S #>  #> $OBX.15 #>   antibiotic           type value #> 1 Penicillin susceptibility     R categorise_etest_mic <- function(x){   x <- sub('<', '', x)   x <- as.numeric(x)   dplyr::case_when(     x < 0.002 ~ 'Susceptible',     x < 0.05 ~ 'Less Susceptible',     TRUE ~ 'Resistant'   ) }  if (any(obx_not_nulls)){   obx_result <-     obx_tmp[obx_not_nulls] %>%     do.call(dplyr::bind_rows, .) %>%     # TODO - capture multiple strain information (was done, likely not PR'd before leaving)     dplyr::distinct(antibiotic, type, value) %>%      tidyr::complete(type = c('susceptibility', 'mic')) %>%     tidyr::pivot_wider(names_from = 'type', values_from = 'value') %>%     dplyr::mutate(susceptibility = ifelse(test = is.na(susceptibility) & !is.na(mic),                                           yes = categorise_etest_mic(mic),                                           no = susceptibility)) } else {   obx_result <- data.frame(antibiotic = NA, susceptibility = NA, mic = NA) }  obx_result #> # A tibble: 5 × 3 #>   antibiotic    mic   susceptibility #>   <chr>         <chr> <chr>          #> 1 NA            NA    NA             #> 2 Penicillin    NA    R              #> 3 Ciprofloxacin NA    R              #> 4 Ceftriaxone   NA    S              #> 5 Azithromycin  NA    S"},{"path":"/articles/HL7-to-linelist-Gonorrhoea.html","id":"completing-the-linelist","dir":"Articles","previous_headings":"Data-wrangling","what":"Completing the linelist","title":"HL7-to-linelist-Gonorrhoea","text":"","code":"msh <- data.frame(lab = p(msg$MSH$SendingFacility, 1))  cbind.data.frame(file = attr(msg, 'filename'), pid, obr, obx_site, obx_result, msh) #>               file first_name middle_name last_name street_address suburb state postcode          dob gender specimen_number specimen_date          site    antibiotic  mic susceptibility  lab #> 1 gonorrhoea-3.hl7      HIJLK                 ABCDE                                 2010 199011190000      M      22R474259Q 20220722+1000 Urethral swab          <NA> <NA>           <NA> BEOW #> 2 gonorrhoea-3.hl7      HIJLK                 ABCDE                                 2010 199011190000      M      22R474259Q 20220722+1000 Urethral swab    Penicillin <NA>              R BEOW #> 3 gonorrhoea-3.hl7      HIJLK                 ABCDE                                 2010 199011190000      M      22R474259Q 20220722+1000 Urethral swab Ciprofloxacin <NA>              R BEOW #> 4 gonorrhoea-3.hl7      HIJLK                 ABCDE                                 2010 199011190000      M      22R474259Q 20220722+1000 Urethral swab   Ceftriaxone <NA>              S BEOW #> 5 gonorrhoea-3.hl7      HIJLK                 ABCDE                                 2010 199011190000      M      22R474259Q 20220722+1000 Urethral swab  Azithromycin <NA>              S BEOW"},{"path":"/articles/HL7-to-linelist-Gonorrhoea.html","id":"as-a-complete-function","dir":"Articles","previous_headings":"Data-wrangling","what":"As a complete function","title":"HL7-to-linelist-Gonorrhoea","text":"happy code , combined single function.","code":"extract_pid_and_antibiotic_data <- function(msg, antibiotics = c('Penicillin', 'Ciprofloxacin', 'Ceftriaxone', 'Azithromycin')){      antibiotics_OR_grep <- paste0(antibiotics, collapse = \"|\")      p <- function(x,...){  purrr::pluck(x,...,.default = '') }      pid <-     with(msg$PID, {       data.frame(         first_name  = p(PatientName, 2),         middle_name = p(PatientName, 3),         last_name = p(PatientName, 1),         street_address = p(PatientAddress, 1),         suburb = p(PatientAddress, 3),         state = p(PatientAddress, 4),         postcode = p(PatientAddress, 5),         dob = DateTimeOfBirth,         gender = Sex)     })      obr <-     with(msg$OBR, {       data.frame(specimen_number = p(FillerOrderNumber, 1),                  specimen_date = p(RequestedDatetime, 1)       )     })      obxs <- grep('OBX', names(msg))      obxs_st_site <-     sapply(msg[obxs], function(x){       x$ValueType == 'ST' & x$ObservationIdentifier[[2]] == 'Site'     })      if (any(obxs_st_site)) {     msg_site_ind <- obxs[obxs_st_site]     obx_site <- data.frame(site = p(msg[[msg_site_ind]]$ObservationValue, 1))   } else {     obx_site <- data.frame(site = NA_character_)   }      # malformed HL7?   if (is.na(obx_site$site)){     obxs_st_site <-       sapply(msg[obxs], function(x){         x$ObservationIdentifier[[2]] == 'Site'       })     if (any(obxs_st_site)) {       msg_site_ind <- obxs[obxs_st_site]       warning('This message did not have ValueType = ST but the site ',               p(msg[[msg_site_ind]]$ObservationValue, 1), ' was found.')     }   }      obx_tmp <-     lapply(msg[obxs], function(x){              # TODO could examine code in position 1       # TODO could match values rather than string manipulation       obx_id <- p(x$ObservationIdentifier, 2)              if (grepl(pattern = antibiotics_OR_grep, x = obx_id, ignore.case = TRUE) ){                  if (grepl(' Susc ', obx_id)) {                      data.frame(antibiotic = sub(' .*', '', obx_id),                      type = 'susceptibility',                      value = p(x$ObservationValue, 1))                    } else if (grepl('MIC', obx_id)) {                      data.frame(antibiotic = sub(' .*', '', obx_id),                      type = 'mic',                      value = p(x$ObservationValue, 1))         }                }     })         is.not.null <- function(x) { !is.null(x) }      obx_not_nulls <- sapply(obx_tmp, is.not.null)      if (any(obx_not_nulls)){     obx_result <-       obx_tmp[obx_not_nulls] %>%       do.call(dplyr::bind_rows, .) %>%       # TODO - capture multiple strain information (was done, likely not PR'd before leaving)       dplyr::distinct(antibiotic, type, value) %>%        tidyr::complete(type = c('susceptibility', 'mic')) %>%       tidyr::pivot_wider(names_from = 'type', values_from = 'value') %>%       dplyr::mutate(susceptibility = ifelse(test = is.na(susceptibility) & !is.na(mic),                                             yes = categorise_etest_mic(mic),                                             no = susceptibility))   } else {     obx_result <- data.frame(antibiotic = NA, susceptibility = NA, mic = NA)   }      msh <- data.frame(lab = p(msg$MSH$SendingFacility, 1))   #msh = data.frame(lab = 'LAB_33', test = '698-1')      cbind.data.frame(file = attr(msg, 'filename'), pid, obr, obx_site, obx_result, msh)    }"},{"path":"/articles/HL7-to-linelist-Gonorrhoea.html","id":"running-the-function","dir":"Articles","previous_headings":"Data-wrangling","what":"Running the function","title":"HL7-to-linelist-Gonorrhoea","text":"","code":"gonorrhoea_parsed_list %>%    lapply(extract_pid_and_antibiotic_data) %>%    do.call(dplyr::bind_rows, .) #>                       file first_name middle_name last_name      street_address      suburb state postcode          dob gender specimen_number specimen_date          site    antibiotic  mic susceptibility   lab #> 1         gonorrhoea-1.hl7      Smith                  John     123 FAKE STREET   LIVERPOOL   NSW     2000 199201010000      M      21R156637Q 20220317+1000       Urethra    Penicillin 0.25      Resistant SLEAS #> 2         gonorrhoea-1.hl7      Smith                  John     123 FAKE STREET   LIVERPOOL   NSW     2000 199201010000      M      21R156637Q 20220317+1000       Urethra Ciprofloxacin <NA>              S SLEAS #> 3         gonorrhoea-1.hl7      Smith                  John     123 FAKE STREET   LIVERPOOL   NSW     2000 199201010000      M      21R156637Q 20220317+1000       Urethra   Ceftriaxone <NA>              S SLEAS #> 4         gonorrhoea-1.hl7      Smith                  John     123 FAKE STREET   LIVERPOOL   NSW     2000 199201010000      M      21R156637Q 20220317+1000       Urethra  Azithromycin <NA>              S SLEAS #> 5         gonorrhoea-2.hl7  Flinstone                  Fred 302 COBBLESTONE WAY     BEDROCK   NSW     2000 198606010000      M     22R2347635O 20220315+1000        Penile    Penicillin 0.25      Resistant SLEAS #> 6         gonorrhoea-2.hl7  Flinstone                  Fred 302 COBBLESTONE WAY     BEDROCK   NSW     2000 198606010000      M     22R2347635O 20220315+1000        Penile Ciprofloxacin <NA>              S SLEAS #> 7         gonorrhoea-2.hl7  Flinstone                  Fred 302 COBBLESTONE WAY     BEDROCK   NSW     2000 198606010000      M     22R2347635O 20220315+1000        Penile   Ceftriaxone <NA>              S SLEAS #> 8         gonorrhoea-2.hl7  Flinstone                  Fred 302 COBBLESTONE WAY     BEDROCK   NSW     2000 198606010000      M     22R2347635O 20220315+1000        Penile  Azithromycin <NA>              S SLEAS #> 9  gonorrhoea-3_2_bugs.hl7      HIJLK                 ABCDE                                           2010 199011190000      M      11Z474259Q 20220722+1000 Urethral swab          <NA> <NA>           <NA>  MEOW #> 10 gonorrhoea-3_2_bugs.hl7      HIJLK                 ABCDE                                           2010 199011190000      M      11Z474259Q 20220722+1000 Urethral swab    Penicillin <NA>              R  MEOW #> 11 gonorrhoea-3_2_bugs.hl7      HIJLK                 ABCDE                                           2010 199011190000      M      11Z474259Q 20220722+1000 Urethral swab Ciprofloxacin <NA>              R  MEOW #> 12 gonorrhoea-3_2_bugs.hl7      HIJLK                 ABCDE                                           2010 199011190000      M      11Z474259Q 20220722+1000 Urethral swab   Ceftriaxone <NA>              S  MEOW #> 13 gonorrhoea-3_2_bugs.hl7      HIJLK                 ABCDE                                           2010 199011190000      M      11Z474259Q 20220722+1000 Urethral swab  Azithromycin <NA>              S  MEOW #> 14        gonorrhoea-3.hl7      HIJLK                 ABCDE                                           2010 199011190000      M      22R474259Q 20220722+1000 Urethral swab          <NA> <NA>           <NA>  BEOW #> 15        gonorrhoea-3.hl7      HIJLK                 ABCDE                                           2010 199011190000      M      22R474259Q 20220722+1000 Urethral swab    Penicillin <NA>              R  BEOW #> 16        gonorrhoea-3.hl7      HIJLK                 ABCDE                                           2010 199011190000      M      22R474259Q 20220722+1000 Urethral swab Ciprofloxacin <NA>              R  BEOW #> 17        gonorrhoea-3.hl7      HIJLK                 ABCDE                                           2010 199011190000      M      22R474259Q 20220722+1000 Urethral swab   Ceftriaxone <NA>              S  BEOW #> 18        gonorrhoea-3.hl7      HIJLK                 ABCDE                                           2010 199011190000      M      22R474259Q 20220722+1000 Urethral swab  Azithromycin <NA>              S  BEOW #> 19 gonorrhoea-4_2_bugs.hl7       John                Blippi      789 Ten Street Burry Hills   NSW     2010 198809030000      M      22R197544P 20220328+1000        Rectum    Penicillin    1              S  MEOW #> 20 gonorrhoea-4_2_bugs.hl7       John                Blippi      789 Ten Street Burry Hills   NSW     2010 198809030000      M      22R197544P 20220328+1000        Rectum Ciprofloxacin <NA>              R  MEOW #> 21 gonorrhoea-4_2_bugs.hl7       John                Blippi      789 Ten Street Burry Hills   NSW     2010 198809030000      M      22R197544P 20220328+1000        Rectum   Ceftriaxone <NA>              S  MEOW #> 22 gonorrhoea-4_2_bugs.hl7       John                Blippi      789 Ten Street Burry Hills   NSW     2010 198809030000      M      22R197544P 20220328+1000        Rectum  Azithromycin <NA>              S  MEOW"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Shaun Nielsen. Author, maintainer. Alasdair King. Author, contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Nielsen S, King (2023). HL7.R: HL7 Wrangling R. R package version 2023.01.10.","code":"@Manual{,   title = {HL7.R: HL7 Wrangling In R},   author = {Shaun Nielsen and Alasdair King},   year = {2023},   note = {R package version 2023.01.10}, }"},{"path":"/index.html","id":"hl7r-","dir":"","previous_headings":"","what":"HL7 Wrangling In R","title":"HL7 Wrangling In R","text":"goal HL7.R enable wrangling HL7 2.3.1/2.4 R. package driven need HL7 wrangling NCIMS tasks (notifiable conditions database state health authority). HL7 messages just flattened list objects, can imported R nested list. Information HL7 specifications sourced : http://www.hl7.eu/HL7v2x/v231/hl7v231segm.htm https://hl7-definition.caristix.com/v2/","code":""},{"path":[]},{"path":"/index.html","id":"devops","dir":"","previous_headings":"Installation","what":"Devops","title":"HL7 Wrangling In R","text":"Clone repo, open HL7.R.Rproj use devtools","code":"library(devtools) #> Loading required package: usethis load_all() #> ℹ Loading HL7.R #> HL7.R - for help see vignette('Getting-started', package = 'HL7.R') or vignette('package = 'HL7.R') for other examples"},{"path":"/index.html","id":"from-archive","dir":"","previous_headings":"Installation","what":"From archive","title":"HL7 Wrangling In R","text":"Someone built package given file - aware built using source binary. Generally, tar.gz = source, zip = binary","code":"install.packages('HL7.R.xxx.tar.gz', repos = NULL, type = 'source') install.packages('HL7.R.xxx.zip', repos = NULL)"},{"path":"/index.html","id":"from-drat","dir":"","previous_headings":"Installation","what":"From DRAT","title":"HL7 Wrangling In R","text":"local package repo may exist. , aware built using source binary. Look ./bin ./src DRAT folder.","code":"library(drat) drat::addRepo(\"workgroup\", 'file:drive:/path/to/drat') install.packages('HL7.R', repos = options()$repos[2]) # assuming binary"},{"path":"/index.html","id":"parsing-a-hl7","dir":"","previous_headings":"","what":"Parsing a HL7","title":"HL7 Wrangling In R","text":"first problem package solves parsing HL7 messages nested list. function parse_hl7_message() parse HL7 file list. works single messages batch messages. parsed message, function try ’s best naming elements. simple top level elements (HL7 segments), bit cumbersome within list elements (HL7 segment fields). convention, fields referenced number (“fourth field MSH sending facility”), names can make things bit readable times. Repeated segments within message numbered output list e.g. OBX.1 OBX.2 (using Set ID value). Notes values imported text, conversion needs done downstream e.g datetimes filename attribute attached list object","code":""},{"path":"/index.html","id":"single-hl7-message","dir":"","previous_headings":"Parsing a HL7","what":"Single HL7 message","title":"HL7 Wrangling In R","text":"Use parse_hl7_message() file path. Traditionally indexes used, using named elements can help readability.","code":"hl7_file <- system.file(package = 'HL7.R', 'extdata/hl7-2.3.1.hl7')  hl7_list <- parse_hl7_message(hl7_file)  names(hl7_list) #> [1] \"MSH\"   \"PID\"   \"PV1\"   \"OBR\"   \"OBX.1\" \"OBX.2\" \"OBX.3\" \"OBX.4\"  # First 5 fields of these segments hl7_list$MSH[1:5] #> $EncodingCharacters #> [1] \"^~\\\\&\" #>  #> $SendingApplication #> [1] \"22-70047081\" #>  #> $SendingFacility #> [1] \"AN EXAMPLE LAB\" #>  #> $ReceivingApplication #> [1] \"NDD\" #>  #> $ReceivingFacility #> [1] \"NSW HEALTH\" hl7_list$PID[1:5] #> $SetID #> [1] \"\" #>  #> $PatientID #> [1] \"\" #>  #> $PatientIdentifierList #> [1] \"AN EXAMPLE LAB\" #>  #> $AlternatePatientIDPID #> [1] \"\" #>  #> $PatientName #> $PatientName$familyName #> [1] \"SIMPSON\" #>  #> $PatientName$givenName #> [1] \"HOMER\" # File from where data parsed attr(hl7_list, 'filename') #> [1] \"hl7-2.3.1.hl7\" with(hl7_list,      data.frame(        first_name = PID[[5]][[2]],        last_name = PID[[5]][[1]],        suburb = PID[[11]][[3]]      ) ) #>   first_name last_name      suburb #> 1      HOMER   SIMPSON SPRINGFIELD  with(hl7_list,      data.frame(        first_name = PID$PatientName$givenName,        last_name = PID$PatientName$familyName,        suburb = PID$PatientAddress$city      ) ) #>   first_name last_name      suburb #> 1      HOMER   SIMPSON SPRINGFIELD"},{"path":"/index.html","id":"batch-hl7-message","dir":"","previous_headings":"Parsing a HL7","what":"Batch HL7 message","title":"HL7 Wrangling In R","text":"parse_hl7_message() check batch headers parse appropriately. result list parsed messages.","code":"hl7_file <- system.file(package = 'HL7.R', 'extdata/fake-covid-batch.hl7')  hl7_list <- parse_hl7_message(hl7_file) #> Found 2 messages within file  # unnamed list of length of the number of messages length(hl7_list) #> [1] 2 names(hl7_list) #> NULL  # a single message lives within the list elements now names(hl7_list[[1]]) #> [1] \"MSH\"   \"PID\"   \"OBX.1\"  # accessing things hl7_list[[1]]$PID$PatientName #> $familyName #> [1] \"Homer\" #>  #> $givenName #> [1] \"Simpson\" hl7_list[[2]]$PID$PatientName #> $familyName #> [1] \"Ned\" #>  #> $givenName #> [1] \"Flanders\""},{"path":"/index.html","id":"multiple-hl7-to-line-list","dir":"","previous_headings":"Parsing a HL7","what":"Multiple HL7 to line list","title":"HL7 Wrangling In R","text":"Cycle file use parse_hl7_message()","code":"# Two HL7 files starting with 'fake' are distributed with this package,  hl7_files <-    system.file(package = 'HL7.R', 'extdata') %>%    list.files(pattern = 'fake-covid-\\\\d.hl7$', full.names = T)  basename(hl7_files) #> [1] \"fake-covid-1.hl7\" \"fake-covid-2.hl7\"  # Parse into list hl7_list <- lapply(hl7_files, parse_hl7_message)  length(hl7_list) #> [1] 2  # Equivalent result to a parsed batch HL7 hl7_list[[1]]$PID$PatientName #> $familyName #> [1] \"Homer\" #>  #> $givenName #> [1] \"Simpson\" hl7_list[[2]]$PID$PatientName #> $familyName #> [1] \"Ned\" #>  #> $givenName #> [1] \"Flanders\"  # el = list element in each loop lapply(hl7_list, function(el){      with(el,        data.frame(          first_name = PID$PatientName$givenName,          last_name = PID$PatientName$familyName,          suburb = PID$PatientAddress$city,          lab = MSH$SendingFacility,          test = OBX.1$ObservationIdentifier$text,          result = OBX.1$ObservationValue[[2]]        )   ) }) %>%    do.call(rbind.data.frame, .) #>   first_name last_name      suburb                     lab          test   result #> 1    Simpson     Homer Springfield      Dr Hibbert Medical nCoV-2019 PCR  Postive #> 2   Flanders       Ned Springfield Nick Riviera Appartment nCoV-2019 PCR Negative"},{"path":"/index.html","id":"creating-hl7-231","dir":"","previous_headings":"","what":"Creating HL7 2.3.1","title":"HL7 Wrangling In R","text":"second problem package solves converting arbitrary piece data HL7 message. conducted piecing together segments message header (MSH), Patient identification (PID) Observation/Results (OBX). package provides segment functions e.g. MSH(), PID(), named parameters build text segment ready piecing together using function build_hl7(). Notes default blank values fields segment function, included final output shown last observed value .e. trailing blanks trimmed see parameter .trim functions helper functions *Components() nested fields. helpers, can safely skip can correctly create required value Dates/Datetimes can converted using datetime_to_hl7_datetime() Conversion Date Datetimes .trim trim trailing blank fields. TRUE default","code":"example_hl7_build <-   build_hl7(     MSH(SendingFacility = 'A lab', ReceivingFacility = 'NSW Health', VersionID = '2.3.1'),     PID(PatientID = '1234',          PatientName = PatientNameComponents(familyName = 'Ross',                                              givenName = 'Bob'),          PatientAddress = PatientAddressComponents(streetAddress = '123 Fake Street',                                                    city = 'Springfield',                                                   zipPostcode = '90120')),     OBX(SetID = 1,         ValueType = 'CE',         ObservationIdentifier = ObservationIdentifierComponents(identifier = 'NSW_LOINC-376',                                                                 text = 'nCoV-2019 PCR',                                                                 nameOfCodingSystem = 'LN'),         ObservationValue = variedComponents('260415000^Not Detected^SNOMED-CT'))   ) example_hl7_build #> MSH|^~\\&||A lab||NSW Health||||||2.3.1 #> PID||1234|||Ross^Bob||||||123 Fake Street^^Springfield^^90120 #> OBX|1|CE|NSW_LOINC-376^nCoV-2019 PCR^LN||260415000^Not Detected^SNOMED-CT datetime_to_hl7_datetime(Sys.time()) #> [1] \"20230110104020\" MSH(SendingFacility = 'NSW HEALTH', VersionID = '2.3.1') #> MSH|^~\\&||NSW HEALTH||||||||2.3.1 MSH(SendingFacility = 'NSW HEALTH', VersionID = '2.3.1', .trim = FALSE) #> MSH|^~\\&||NSW HEALTH||||||||2.3.1||||||||  PatientAddressComponents(streetAddress = '123 Fake Street') #> [1] \"123 Fake Street\" PatientAddressComponents(streetAddress = '123 Fake Street', .trim = FALSE) #> [1] \"123 Fake Street^^^^^\""},{"path":"/index.html","id":"line-list-to-hl7","dir":"","previous_headings":"Creating HL7 2.3.1","what":"Line list to HL7","title":"HL7 Wrangling In R","text":"Often task translating line list HL7 messages. simple example show : loop rows using lapply convert row list easy reference e.g. d$firstname","code":"# A 2 row line list with fake data is distributed with this package some_line_list <- read.csv(system.file(package = 'HL7.R', 'extdata/fake-covid-n2.csv')) some_line_list #>   firstname lastname                street      suburb test_id     text_text result_code result_text                facility #> 1     Homer  Simpson 742 Evergreen Terrace Springfield  ncov19 nCoV-2019 PCR           P     Postive      Dr Hibbert Medical #> 2       Ned Flanders 744 Evergreen Terrace Springfield  ncov19 nCoV-2019 PCR           N    Negative Nick Riviera Appartment hl7_build_list <-   lapply(1:nrow(some_line_list), function(row){          # d = data element (the row, as a list)     d <- as.list(some_line_list[row,])          build_hl7(       MSH(SendingFacility = d$facility, ReceivingFacility = 'NSW Health', VersionID = '2.3.1'),       PID(PatientID = '1',            PatientName = PatientNameComponents(familyName = d$firstname,                                                givenName = d$lastname),            PatientAddress = PatientAddressComponents(streetAddress = d$street,                                                      city = d$suburb)),       OBX(SetID = 1,           ValueType = 'CE',           ObservationIdentifier = ObservationIdentifierComponents(identifier = d$test_id,                                                                   text = d$text_text,                                                                   nameOfCodingSystem = 'LN'),           ObservationValue = variedComponents(d$result_code, d$result_text))     )   }) hl7_build_list #> [[1]] #> MSH|^~\\&||Dr Hibbert Medical||NSW Health||||||2.3.1 #> PID||1|||Homer^Simpson||||||742 Evergreen Terrace^^Springfield #> OBX|1|CE|ncov19^nCoV-2019 PCR^LN||P^Postive #>  #> [[2]] #> MSH|^~\\&||Nick Riviera Appartment||NSW Health||||||2.3.1 #> PID||1|||Ned^Flanders||||||744 Evergreen Terrace^^Springfield #> OBX|1|CE|ncov19^nCoV-2019 PCR^LN||N^Negative # for filenames 001, 002, etc if necessary n_leading_zero <- sprintf('%%0%sd', nchar(length(hl7_build_list)))  # Output somewhere # * note this was used to make fake-covid-*.hl7 used above for(i in seq_along(hl7_build_list)){    i_leading_zero = sprintf(fmt = n_leading_zero, i)   filename = sprintf('Some-filename-%s.hl7', i_leading_zero)   path = file.path('some/path', filename)   writeLines(hl7_build_list[[i]], con = path) }"},{"path":"/reference/BHS.html","id":null,"dir":"Reference","previous_headings":"","what":"Segment BHS - Batch Header Segment — BHS","title":"Segment BHS - Batch Header Segment — BHS","text":"Convert input BHS segment HL7 2.3.1 2.4. Outputs character vector length 1 input values pipe delimited.","code":""},{"path":"/reference/BHS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Segment BHS - Batch Header Segment — BHS","text":"","code":"BHS(   BHS.1_BatchFieldSeparator = \"|\",   BHS.2_BatchEncodingCharacters = \"\",   BHS.3_BatchSendingApplication = \"\",   BHS.4_BatchSendingFacility = \"\",   BHS.5_BatchReceivingApplication = \"\",   BHS.6_BatchReceivingFacility = \"\",   BHS.7_BatchCreationDateTime = \"\",   BHS.8_BatchSecurity = \"\",   BHS.9_BatchNameIDType = \"\",   BHS.10_BatchComment = \"\",   BHS.11_BatchControlID = \"\",   BHS.12_ReferenceBatchControlID = \"\",   .version = c(\"2.3.1\", \"2.4\"),   .trim = TRUE )"},{"path":"/reference/BHS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Segment BHS - Batch Header Segment — BHS","text":"BHS.1_BatchFieldSeparator = \"|\", BHS.2_BatchEncodingCharacters = \"\", BHS.3_BatchSendingApplication = \"\", BHS.4_BatchSendingFacility = \"\", BHS.5_BatchReceivingApplication = \"\", BHS.6_BatchReceivingFacility = \"\", BHS.7_BatchCreationDateTime = \"\", BHS.8_BatchSecurity = \"\", BHS.9_BatchNameIDType = \"\", BHS.10_BatchComment = \"\", BHS.11_BatchControlID = \"\", BHS.12_ReferenceBatchControlID = \"\" .version = c(\"2.3.1\", \"2.4\"), .trim = TRUE","code":""},{"path":"/reference/BHS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Segment BHS - Batch Header Segment — BHS","text":"character vector","code":""},{"path":"/reference/FHS.html","id":null,"dir":"Reference","previous_headings":"","what":"Segment FHS - File Header Segment — FHS","title":"Segment FHS - File Header Segment — FHS","text":"Convert input FHS segment HL7 2.3.1 2.4. Outputs character vector length 1 input values pipe delimited.","code":""},{"path":"/reference/FHS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Segment FHS - File Header Segment — FHS","text":"","code":"FHS(   FHS.1_FileFieldSeparator = \"|\",   FHS.2_FileEncodingCharacters = \"\",   FHS.3_FileSendingApplication = \"\",   FHS.4_FileSendingFacility = \"\",   FHS.5_FileReceivingApplication = \"\",   FHS.6_FileReceivingFacility = \"\",   FHS.7_FileCreationDateTime = \"\",   FHS.8_FileSecurity = \"\",   FHS.9_FileNameID = \"\",   FHS.10_FileHeaderComment = \"\",   FHS.11_FileControlID = \"\",   FHS.12_ReferenceFileControlID = \"\",   .version = c(\"2.3.1\", \"2.4\"),   .trim = TRUE )"},{"path":"/reference/FHS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Segment FHS - File Header Segment — FHS","text":"FHS.1_FileFieldSeparator = \"|\", FHS.2_FileEncodingCharacters = \"\", FHS.3_FileSendingApplication = \"\", FHS.4_FileSendingFacility = \"\", FHS.5_FileReceivingApplication = \"\", FHS.6_FileReceivingFacility = \"\", FHS.7_FileCreationDateTime = \"\", FHS.8_FileSecurity = \"\", FHS.9_FileNameID = \"\", FHS.10_FileHeaderComment = \"\", FHS.11_FileControlID = \"\", FHS.12_ReferenceFileControlID = \"\", .version = c(\"2.3.1\", \"2.4\"), .trim = TRUE","code":""},{"path":"/reference/FHS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Segment FHS - File Header Segment — FHS","text":"character vector","code":""},{"path":"/reference/MSH.html","id":null,"dir":"Reference","previous_headings":"","what":"Segment MSH: Message Header — MSH","title":"Segment MSH: Message Header — MSH","text":"Convert input MSH segment HL7 2.3.1 2.4. Outputs character vector length 1 input values pipe delimited. function definition helper functions particular fields: SendingFacilityComponents, MessageTypeComponents.","code":""},{"path":"/reference/MSH.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Segment MSH: Message Header — MSH","text":"","code":"MSH(   EncodingCharacters = EncodingCharactersComponents(),   SendingApplication = \"\",   SendingFacility = SendingFacilityComponents(),   ReceivingApplication = \"\",   ReceivingFacility = \"\",   DateTimeOfMessage = \"\",   Security = \"\",   MessageType = MessageTypeComponents(),   MessageControlID = \"\",   ProcessingID = \"\",   VersionID = \"\",   SequenceNumber = \"\",   ContinuationPointer = \"\",   AcceptAcknowledgmentType = \"\",   ApplicationAcknowledgmentType = \"\",   CountryCode = \"\",   CharacterSet = \"\",   PrincipalLanguageOfMessage = \"\",   AlternateCharacterSetHandlingScheme = \"\",   ConformanceStatementID = \"\",   .FieldSeparator = \"|\",   .version = c(\"2.3.1\", \"2.4\"),   .trim = TRUE )  EncodingCharactersComponents(   componentSeparator = \"^\",   repetitionSeparator = \"~\",   escapeCharacter = \"\\\\\",   subcomponentSeparator = \"&\" )  SendingFacilityComponents(   namespace_ID = \"\",   universalID = \"\",   universalIDtype = \"\",   .sep = \"^\",   .trim = TRUE )  MessageTypeComponents(   messageType = \"\",   triggerEvent = \"\",   messageStructure = \"\",   .sep = \"^\",   .trim = TRUE )  VersionIDComponents(   versionId = \"\",   internationalizationCode = \"\",   internationalversionId = \"\",   .sep = \"^\",   .trim = TRUE )"},{"path":"/reference/MSH.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Segment MSH: Message Header — MSH","text":"EncodingCharacters = EncodingCharactersComponents(), SendingApplication = \"\", SendingFacility = SendingFacilityComponents(), ReceivingApplication = \"\", ReceivingFacility = \"\", DateTimeOfMessage = \"\", Security = \"\", MessageType = MessageTypeComponents(), MessageControlID = \"\", ProcessingID = \"\", VersionID = \"\", SequenceNumber = \"\", ContinuationPointer = \"\", AcceptAcknowledgmentType = \"\", ApplicationAcknowledgmentType = \"\", CountryCode = \"\", CharacterSet = \"\", PrincipalLanguageOfMessage = \"\", AlternateCharacterSetHandlingScheme = \"\", ConformanceStatementID = \"\", .FieldSeparator = '|', .version either \"2.3.1\" \"2.4\", .trim = TRUE componentSeparator = \"^\", repetitionSeparator = \"~\", escapeCharacter = \"\\\", subcomponentSeparator = \"&\" namespace_ID = \"\", universalID = \"\", universalIDtype = \"\", .sep = \"^\", messageType = \"\", triggerEvent = \"\", messageStructure = \"\", versionId = '', internationalizationCode = '', internationalversionId = '',","code":""},{"path":"/reference/MSH.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Segment MSH: Message Header — MSH","text":"character vector","code":""},{"path":"/reference/MSH.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Segment MSH: Message Header — MSH","text":"EncodingCharactersComponents(): create character vector length 1 input values separated ^ SendingFacilityComponents(): create character vector length 1 input values separated ^ MessageTypeComponents(): create character vector length 1 input values separated ^ VersionIDComponents(): create character vector length 1 input values separated ^","code":""},{"path":"/reference/OBR.html","id":null,"dir":"Reference","previous_headings":"","what":"Segment OBR: Observation Request — OBR","title":"Segment OBR: Observation Request — OBR","text":"Convert input OBR segment HL7 2.3.1. Outputs character vector length 1 input values pipe delimited. function definition helper functions particular fields: UniversalServiceIDComponents","code":""},{"path":"/reference/OBR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Segment OBR: Observation Request — OBR","text":"","code":"OBR(   SetID = \"\",   PlacerOrderNumber = \"\",   FillerOrderNumber = \"\",   UniversalServiceID = UniversalServiceIDComponents(),   PriorityOBR = \"\",   RequestedDatetime = \"\",   ObservationDateTime = \"\",   ObservationEndDateTime = \"\",   CollectionVolume = \"\",   CollectorIdentifier = \"\",   SpecimenActionCode = \"\",   DangerCode = \"\",   RelevantClinicalInfo = \"\",   SpecimenReceivedDateTime = \"\",   SpecimenSource = \"\",   OrderingProvider = \"\",   OrderCallbackPhoneNumber = \"\",   PlacerField1 = \"\",   PlacerField2 = \"\",   FillerField1 = \"\",   FillerField2 = \"\",   ResultsRptStatusChngDateTime = \"\",   ChargetoPractice = \"\",   DiagnosticServSetID = \"\",   ResultStatus = \"\",   ParentResult = \"\",   QuantityTiming = \"\",   ResultCopiesTo = \"\",   Parent = \"\",   TransportationMode = \"\",   ReasonforStudy = \"\",   PrincipalResultInterpreter = \"\",   AssistantResultInterpreter = \"\",   Technician = \"\",   Transcriptionist = \"\",   ScheduledDateTime = \"\",   NumberofSampleContainers = \"\",   TransportLogisticsofCollectedSample = \"\",   CollectorsComment = \"\",   TransportArrangementResponsibility = \"\",   TransportArranged = \"\",   EscortRequired = \"\",   PlannedPatientTransportComment = \"\",   ProcedureCode = \"\",   ProcedureCodeModifier = \"\",   .FieldSeparator = \"|\",   .version = c(\"2.3.1\", \"2.4\"),   .trim = TRUE )"},{"path":"/reference/OBR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Segment OBR: Observation Request — OBR","text":"SetID = \"\", PlacerOrderNumber = \"\", FillerOrderNumber = \"\", UniversalServiceID = UniversalServiceIDComponents(), PriorityOBR = \"\", RequestedDatetime = \"\", ObservationDateTime = \"\", ObservationEndDateTime = \"\", CollectionVolume = \"\", CollectorIdentifier = \"\", SpecimenActionCode = \"\", DangerCode = \"\", RelevantClinicalInfo = \"\", SpecimenReceivedDateTime = \"\", SpecimenSource = \"\", OrderingProvider = \"\", OrderCallbackPhoneNumber = \"\", PlacerField1 = \"\", PlacerField2 = \"\", FillerField1 = \"\", FillerField2 = \"\", ResultsRptStatusChngDateTime = \"\", ChargetoPractice = \"\", DiagnosticServSetID = \"\", ResultStatus = \"\", ParentResult = \"\", QuantityTiming = \"\", ResultCopiesTo = \"\", Parent = \"\", TransportationMode = \"\", ReasonforStudy = \"\", PrincipalResultInterpreter = \"\", AssistantResultInterpreter = \"\", Technician = \"\", Transcriptionist = \"\", ScheduledDateTime = \"\", NumberofSampleContainers = \"\", TransportLogisticsofCollectedSample = \"\", CollectorsComment = \"\", TransportArrangementResponsibility = \"\", TransportArranged = \"\", EscortRequired = \"\", PlannedPatientTransportComment = \"\", ProcedureCode = \"\", ProcedureCodeModifier = \"\", .FieldSeparator = '|', .version = c(\"2.3.1\", \"2.4\"), .trim = TRUE","code":""},{"path":"/reference/OBX.html","id":null,"dir":"Reference","previous_headings":"","what":"Segment OBX: Observation/Result — OBX","title":"Segment OBX: Observation/Result — OBX","text":"Convert input OBX segment HL7 2.3.1. Outputs character vector length 1 input values pipe delimited. function definition helper functions particular fields: UnitsComponents","code":""},{"path":"/reference/OBX.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Segment OBX: Observation/Result — OBX","text":"","code":"OBX(   SetID = \"\",   ValueType = \"\",   ObservationIdentifier = \"\",   ObservationSubID = ObservationIdentifierComponents(),   ObservationValue = \"\",   Units = UnitsComponents(),   ReferencesRange = \"\",   AbnormalFlags = \"\",   Probability = \"\",   NatureofAbnormalTest = \"\",   ObservationResultStatus = \"\",   DateLastObsNormalValues = \"\",   UserDefinedAccessChecks = \"\",   DateTimeoftheObservation = \"\",   ProducersID = \"\",   ResponsibleObserver = \"\",   ObservationMethod = \"\",   EquipmentInstanceIdentifier = \"\",   DateTimeoftheAnalysis = \"\",   .FieldSeparator = \"|\",   .version = c(\"2.3.1\", \"2.4\"),   .trim = TRUE )"},{"path":"/reference/OBX.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Segment OBX: Observation/Result — OBX","text":"SetID = \"\", ValueType = \"\", ObservationIdentifier = \"\", ObservationSubID = ObservationIdentifierComponents(), ObservationValue = '', Units = UnitsComponents(), ReferencesRange = \"\", AbnormalFlags = \"\", Probability = \"\", NatureofAbnormalTest = \"\", ObservationResultStatus = \"\", DateLastObsNormalValues = \"\", UserDefinedAccessChecks = \"\", DateTimeoftheObservation = \"\", ProducersID = \"\", ResponsibleObserver = \"\", ObservationMethod = \"\", EquipmentInstanceIdentifier = '', DateTimeoftheAnalysis = '', .FieldSeparator = '|', .version = c(\"2.3.1\", \"2.4\"), .trim = TRUE","code":""},{"path":"/reference/ORC.html","id":null,"dir":"Reference","previous_headings":"","what":"Segment ORC: Common Order — ORC","title":"Segment ORC: Common Order — ORC","text":"Convert input segment HL7 2.3.1. Outputs character vector length 1 input values pipe delimited. function definition helper functions particular fields:","code":""},{"path":"/reference/ORC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Segment ORC: Common Order — ORC","text":"","code":"ORC(   OrderControl = \"\",   PlacerOrderNumber = \"\",   FillerOrderNumber = \"\",   PlacerGroupNumber = \"\",   OrderStatus = \"\",   ResponseFlag = \"\",   QuantityTiming = \"\",   Parent = \"\",   DateTimeofTransaction = \"\",   EnteredBy = \"\",   VerifiedBy = \"\",   OrderingProvider = \"\",   EnterersLocation = \"\",   CallBackPhoneNumber = \"\",   OrderEffectiveDateTime = \"\",   OrderControlCodeReason = \"\",   EnteringOrganization = \"\",   EnteringDevice = \"\",   ActionBy = \"\",   AdvancedBeneficiaryNoticeCode = \"\",   OrderingFacilityName = \"\",   OrderingFacilityAddress = \"\",   OrderingFacilityPhoneNumber = \"\",   OrderingProviderAddress = \"\",   OrderStatusModifier = \"\",   .FieldSeparator = \"|\",   .version = c(\"2.3.1\", \"2.4\"),   .trim = TRUE )"},{"path":"/reference/ORC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Segment ORC: Common Order — ORC","text":"OrderControl = '', PlacerOrderNumber = '', FillerOrderNumber = '', PlacerGroupNumber = '', OrderStatus = '', ResponseFlag = '', QuantityTiming = '', Parent = '', DateTimeofTransaction = '', EnteredBy = '', VerifiedBy = '', OrderingProvider = '', EnterersLocation = '', CallBackPhoneNumber = '', OrderEffectiveDateTime = '', OrderControlCodeReason = '', EnteringOrganization = '', EnteringDevice = '', ActionBy = '', AdvancedBeneficiaryNoticeCode = '', OrderingFacilityName = '', OrderingFacilityAddress = '', OrderingFacilityPhoneNumber = '', OrderingProviderAddress = '', OrderStatusModifier = '', .FieldSeparator = '|', .version = c(\"2.3.1\", \"2.4\"), .trim = TRUE","code":""},{"path":"/reference/ObservationIdentifierComponents.html","id":null,"dir":"Reference","previous_headings":"","what":"Components of ObservationIdentifier — ObservationIdentifierComponents","title":"Components of ObservationIdentifier — ObservationIdentifierComponents","text":"Function create character vector length 1 input values separated ^","code":""},{"path":"/reference/ObservationIdentifierComponents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Components of ObservationIdentifier — ObservationIdentifierComponents","text":"","code":"ObservationIdentifierComponents(   identifier = \"\",   text = \"\",   nameOfCodingSystem = \"\",   alternateIdentifier = \"\",   alternateText = \"\",   nameOfAlternateCodingSystem = \"\",   .sep = \"^\",   .trim = TRUE )"},{"path":"/reference/ObservationIdentifierComponents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Components of ObservationIdentifier — ObservationIdentifierComponents","text":"identifier = '', text = '', nameOfCodingSystem = '', alternateIdentifier = '', alternateText = '', nameOfAlternateCodingSystem = '', .sep = '^', .trim = TRU","code":""},{"path":"/reference/PID.html","id":null,"dir":"Reference","previous_headings":"","what":"Segment PID: Patient identification — PID","title":"Segment PID: Patient identification — PID","text":"Convert input PID segment HL7 2.3.1. Outputs character vector length 1 input values pipe delimited. function definition helper functions particular fields: PatientNameComponents, PatientAddressComponents, PhoneNumberComponents","code":""},{"path":"/reference/PID.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Segment PID: Patient identification — PID","text":"","code":"PID(   SetID = \"\",   PatientID = \"\",   PatientIdentifierList = \"\",   AlternatePatientIDPID = \"\",   PatientName = PatientNameComponents(),   MothersMaidenName = \"\",   DateTimeOfBirth = \"\",   Sex = \"\",   PatientAlias = \"\",   Race = \"\",   PatientAddress = PatientAddressComponents(),   CountyCode = \"\",   PhoneNumberHome = PhoneNumberComponents(),   PhoneNumberBusiness = PhoneNumberComponents(),   PrimaryLanguage = \"\",   MaritalStatus = \"\",   Religion = \"\",   PatientAccountNumber = \"\",   SSNNumberPatient = \"\",   DriversLicenseNumberPatient = \"\",   MothersIdentifier = \"\",   EthnicGroup = \"\",   BirthPlace = \"\",   MultipleBirthIndicator = \"\",   BirthOrder = \"\",   Citizenship = \"\",   VeteransMilitaryStatus = \"\",   Nationality = \"\",   PatientDeathDateandTime = \"\",   PatientDeathIndicator = \"\",   IdentityReliabilityCode = \"\",   IdentityUnknownIndicator = \"\",   LastUpdateDateTime = \"\",   LastUpdateFacility = \"\",   SpeciesCode = \"\",   BreedCode = \"\",   Strain = \"\",   ProductionClassCode = \"\",   .version = c(\"2.3.1\", \"2.4\"),   .FieldSeparator = \"|\",   .trim = TRUE )"},{"path":"/reference/PID.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Segment PID: Patient identification — PID","text":"SetID = \"\", PatientID = \"\", PatientIdentifierList = \"\", AlternatePatientIDPID = \"\", PatientName = PatientNameComponents(), MothersMaidenName = \"\", DateTimeOfBirth = \"\", Sex = \"\", PatientAlias = \"\", Race = \"\", PatientAddress = PatientAddressComponents(), CountyCode = \"\", PhoneNumberHome = PhoneNumberComponents(), PhoneNumberBusiness = PhoneNumberComponents(), PrimaryLanguage = \"\", MaritalStatus = \"\", Religion = \"\", PatientAccountNumber = \"\", SSNNumberPatient = \"\", DriversLicenseNumberPatient = \"\", MothersIdentifier = \"\", EthnicGroup = \"\", BirthPlace = \"\", MultipleBirthIndicator = \"\", BirthOrder = \"\", Citizenship = \"\", VeteransMilitaryStatus = \"\", Nationality = \"\", PatientDeathDateandTime = \"\", PatientDeathIndicator = \"\", IdentityReliabilityCode = \"\", IdentityUnknownIndicator = \"\", LastUpdateDateTime = \"\", LastUpdateFacility = \"\", SpeciesCode = \"\", BreedCode = \"\", Strain = \"\", ProductionClassCode = \"\", .version = c(\"2.3.1\", \"2.4\"), .FieldSeparator = '|', .trim = TRUE","code":""},{"path":"/reference/PV1.html","id":null,"dir":"Reference","previous_headings":"","what":"Segment PV1: Patient visit — PV1","title":"Segment PV1: Patient visit — PV1","text":"Convert input MSH segment HL7 2.3.1. Outputs character vector length 1 input values pipe delimited. function definition helper functions particular fields: SendingFacilityComponents, MessageTypeComponents.","code":""},{"path":"/reference/PV1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Segment PV1: Patient visit — PV1","text":"","code":"PV1(   SetID = \"\",   PatientClass = \"\",   AssignedPatientLocation = \"\",   AdmissionType = \"\",   PreadmitNumber = \"\",   PriorPatientLocation = \"\",   AttendingDoctor = \"\",   ReferringDoctor = \"\",   ConsultingDoctor = \"\",   HospitalService = \"\",   TemporaryLocation = \"\",   PreadmitTestIndicator = \"\",   ReadmissionIndicator = \"\",   AdmitSource = \"\",   AmbulatoryStatus = \"\",   VIPIndicator = \"\",   AdmittingDoctor = \"\",   PatientType = \"\",   VisitNumber = \"\",   FinancialClass = \"\",   ChargePriceIndicator = \"\",   CourtesyCode = \"\",   CreditRating = \"\",   ContractCode = \"\",   ContractEffectiveDate = \"\",   ContractAmount = \"\",   ContractPeriod = \"\",   InterestCode = \"\",   TransfertoBadDebtCode = \"\",   TransfertoBadDebtDate = \"\",   BadDebtAgencyCode = \"\",   BadDebtTransferAmount = \"\",   BadDebtRecoveryAmount = \"\",   DeleteAccountIndicator = \"\",   DeleteAccountDate = \"\",   DischargeDisposition = \"\",   DischargedtoLocation = \"\",   DietType = \"\",   ServicingFacility = \"\",   BedStatus = \"\",   AccountStatus = \"\",   PendingLocation = \"\",   PriorTemporaryLocation = \"\",   AdmitDateTime = \"\",   DischargeDateTime = \"\",   CurrentPatientBalance = \"\",   TotalCharges = \"\",   TotalAdjustments = \"\",   TotalPayments = \"\",   AlternateVisitID = \"\",   VisitIndicator = \"\",   OtherHealthcareProvider = \"\",   .FieldSeparator = \"|\",   .version = c(\"2.3.1\", \"2.4\"),   .trim = TRUE )"},{"path":"/reference/PV1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Segment PV1: Patient visit — PV1","text":"SetID = \"\", PatientClass = \"\", AssignedPatientLocation = \"\", AdmissionType = \"\", PreadmitNumber = \"\", PriorPatientLocation = \"\", AttendingDoctor = \"\", ReferringDoctor = \"\", ConsultingDoctor = \"\", HospitalService = \"\", TemporaryLocation = \"\", PreadmitTestIndicator = \"\", ReadmissionIndicator = \"\", AdmitSource = \"\", AmbulatoryStatus = \"\", VIPIndicator = \"\", AdmittingDoctor = \"\", PatientType = \"\", VisitNumber = \"\", FinancialClass = \"\", ChargePriceIndicator = \"\", CourtesyCode = \"\", CreditRating = \"\", ContractCode = \"\", ContractEffectiveDate = \"\", ContractAmount = \"\", ContractPeriod = \"\", InterestCode = \"\", TransfertoBadDebtCode = \"\", TransfertoBadDebtDate = \"\", BadDebtAgencyCode = \"\", BadDebtTransferAmount = \"\", BadDebtRecoveryAmount = \"\", DeleteAccountIndicator = \"\", DeleteAccountDate = \"\", DischargeDisposition = \"\", DischargedtoLocation = \"\", DietType = \"\", ServicingFacility = \"\", BedStatus = \"\", AccountStatus = \"\", PendingLocation = \"\", PriorTemporaryLocation = \"\", AdmitDateTime = \"\", DischargeDateTime = \"\", CurrentPatientBalance = \"\", TotalCharges = \"\", TotalAdjustments = \"\", TotalPayments = \"\", AlternateVisitID = \"\", VisitIndicator = \"\", OtherHealthcareProvider = \"\" .FieldSeparator = '|' .version = c(\"2.3.1\", \"2.4\") .trim = TRUE","code":""},{"path":"/reference/PatientAddressComponents.html","id":null,"dir":"Reference","previous_headings":"","what":"Components of PID PatientAddress — PatientAddressComponents","title":"Components of PID PatientAddress — PatientAddressComponents","text":"Function create character vector length 1 input values separated ^","code":""},{"path":"/reference/PatientAddressComponents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Components of PID PatientAddress — PatientAddressComponents","text":"","code":"PatientAddressComponents(   streetAddress = \"\",   otherDesignation = \"\",   city = \"\",   stateProvince = \"\",   zipPostcode = \"\",   country = \"\",   .sep = \"^\",   .trim = TRUE )"},{"path":"/reference/PatientAddressComponents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Components of PID PatientAddress — PatientAddressComponents","text":"streetAddress = '', otherDesignation = '', city = '', stateProvince = '', zipPostcode = '', country = '', .sep = \"^\", .trim = TRUE","code":""},{"path":"/reference/PatientIdentifierListComponents.html","id":null,"dir":"Reference","previous_headings":"","what":"Components of PID PatientAddress — PatientIdentifierListComponents","title":"Components of PID PatientAddress — PatientIdentifierListComponents","text":"Function create character vector length 1 input values separated ^","code":""},{"path":"/reference/PatientIdentifierListComponents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Components of PID PatientAddress — PatientIdentifierListComponents","text":"","code":"PatientIdentifierListComponents(   id = \"\",   checkDigit = \"\",   codeIdentifyingTheCheckDigitSchemeEmployed = \"\",   assigningAuthority = \"\",   IdentifierTypeCode = \"\",   AssigningFacility = \"\",   .sep = \"^\",   .trim = TRUE )"},{"path":"/reference/PatientIdentifierListComponents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Components of PID PatientAddress — PatientIdentifierListComponents","text":"id = '', checkDigit = '', codeIdentifyingTheCheckDigitSchemeEmployed = '', assigningAuthority = '', IdentifierTypeCode = '', AssigningFacility = '', .sep = \"^\", .trim = TRUE","code":""},{"path":"/reference/PatientNameComponents.html","id":null,"dir":"Reference","previous_headings":"","what":"Components of PID PatientName — PatientNameComponents","title":"Components of PID PatientName — PatientNameComponents","text":"Function create character vector length 1 input values separated ^","code":""},{"path":"/reference/PatientNameComponents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Components of PID PatientName — PatientNameComponents","text":"","code":"PatientNameComponents(   familyName = \"\",   givenName = \"\",   middleName = \"\",   suffix = \"\",   prefix = \"\",   degree = \"\",   nameTypeCode = \"\",   nameRepresentationCode = \"\",   .sep = \"^\",   .trim = TRUE )"},{"path":"/reference/PatientNameComponents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Components of PID PatientName — PatientNameComponents","text":"familyName = \"\", givenName = \"\", middleName = \"\", suffix = \"\", prefix = \"\", degree = \"\", nameTypeCode = \"\", nameRepresentationCode =  \"\", .sep = \"^\", .trim = TRUE","code":""},{"path":"/reference/PhoneNumberComponents.html","id":null,"dir":"Reference","previous_headings":"","what":"Components of PID PhoneNumber* — PhoneNumberComponents","title":"Components of PID PhoneNumber* — PhoneNumberComponents","text":"Function create character vector length 1 input values separated ^","code":""},{"path":"/reference/PhoneNumberComponents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Components of PID PhoneNumber* — PhoneNumberComponents","text":"","code":"PhoneNumberComponents(   anyText = \"\",   telecommunicationUseCode = \"\",   telecommunicationEquipmentType = \"\",   emailAddress = \"\",   countryCode = \"\",   areaCityCode = \"\",   phoneNumber = \"\",   extension = \"\",   anyText2 = \"\",   .sep = \"^\",   .trim = TRUE )"},{"path":"/reference/PhoneNumberComponents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Components of PID PhoneNumber* — PhoneNumberComponents","text":"anyText = \"\", telecommunicationUseCode = \"\", telecommunicationEquipmentType = \"\", emailAddress = \"\", countryCode = \"\", areaCityCode = \"\", phoneNumber = \"\", extension = \"\", anyText2 = \"\", .sep = \"^\", .trim = TRUE","code":""},{"path":"/reference/RaceComponents.html","id":null,"dir":"Reference","previous_headings":"","what":"Components of PID Race — RaceComponents","title":"Components of PID Race — RaceComponents","text":"Function create character vector length 1 input values separated ^","code":""},{"path":"/reference/RaceComponents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Components of PID Race — RaceComponents","text":"","code":"RaceComponents(   identifier = \"\",   text = \"\",   nameOfCodingSystem = \"\",   alternateIdentifier = \"\",   alternateText = \"\",   nameOfAlternateCodingSystem = \"\",   .sep = \"^\",   .trim = TRUE )"},{"path":"/reference/RaceComponents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Components of PID Race — RaceComponents","text":"identifier = \"\", text = \"\", nameOfCodingSystem = \"\", alternateIdentifier = \"\", alternateText = \"\", nameOfAlternateCodingSystem = \"\", .sep = \"^\", .trim = TRUE","code":""},{"path":"/reference/UnitsComponents.html","id":null,"dir":"Reference","previous_headings":"","what":"Components of OBR Units — UnitsComponents","title":"Components of OBR Units — UnitsComponents","text":"Function create character vector length 1 input values separated ^","code":""},{"path":"/reference/UnitsComponents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Components of OBR Units — UnitsComponents","text":"","code":"UnitsComponents(   identifier = \"\",   text = \"\",   nameOfCodingSystem = \"\",   alternateIdentifier = \"\",   alternateText = \"\",   nameOfAlternateCodingSystem = \"\",   .sep = \"^\",   .trim = TRUE )"},{"path":"/reference/UnitsComponents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Components of OBR Units — UnitsComponents","text":"identifier = '', text = '', nameOfCodingSystem = '', alternateIdentifier = '', alternateText = '', nameOfAlternateCodingSystem = '', .sep = '^', .trim = TRUE","code":""},{"path":"/reference/UniversalServiceIDComponents.html","id":null,"dir":"Reference","previous_headings":"","what":"Components of OBR UniversalServiceID — UniversalServiceIDComponents","title":"Components of OBR UniversalServiceID — UniversalServiceIDComponents","text":"Function create character vector length 1 input values separated ^","code":""},{"path":"/reference/UniversalServiceIDComponents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Components of OBR UniversalServiceID — UniversalServiceIDComponents","text":"","code":"UniversalServiceIDComponents(   identifier = \"\",   text = \"\",   nameOfCodingSystem = \"\",   alternateIdentifier = \"\",   alternateText = \"\",   nameOfAlternateCodingSystem = \"\",   .sep = \"^\",   .trim = TRUE )"},{"path":"/reference/UniversalServiceIDComponents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Components of OBR UniversalServiceID — UniversalServiceIDComponents","text":"identifier = \"\", text = \"\", nameOfCodingSystem = \"\", alternateIdentifier = \"\", alternateText = \"\", nameOfAlternateCodingSystem = \"\", .sep = '^', .trim = TRUE","code":""},{"path":"/reference/add_field_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Add names within HL7 segments - field names — add_field_names","title":"Add names within HL7 segments - field names — add_field_names","text":"function examines lengths elements within parsed HL7 length > 1, compare element name list gathered names segment_names. names found, field names applied","code":""},{"path":"/reference/add_field_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add names within HL7 segments - field names — add_field_names","text":"","code":"add_field_names(hl7_list_element, dev_msg = FALSE)"},{"path":"/reference/add_field_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add names within HL7 segments - field names — add_field_names","text":"hl7_list_element list, one HL7 parsing conducted dev_msg boolean, development message - reveal field still require names","code":""},{"path":"/reference/browse_hl7.html","id":null,"dir":"Reference","previous_headings":"","what":"Browse a parsed HL7 — browse_hl7","title":"Browse a parsed HL7 — browse_hl7","text":"Browse parsed HL7 viewer pane. function uses details summary HTML tags effect","code":""},{"path":"/reference/browse_hl7.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Browse a parsed HL7 — browse_hl7","text":"","code":"browse_hl7(x)"},{"path":"/reference/browse_hl7.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Browse a parsed HL7 — browse_hl7","text":"x HL7 file parse","code":""},{"path":"/reference/build_hl7.html","id":null,"dir":"Reference","previous_headings":"","what":"Build HL7 character vector from segment functions — build_hl7","title":"Build HL7 character vector from segment functions — build_hl7","text":"Build character vector segment functions export HL7 text files function accepts objects segment functions MSH(), OBR(), etc. first segment must MSH().","code":""},{"path":"/reference/build_hl7.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build HL7 character vector from segment functions — build_hl7","text":"","code":"build_hl7(...)"},{"path":"/reference/build_hl7.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build HL7 character vector from segment functions — build_hl7","text":"... segment functions MSH(), OBR(), etc.","code":""},{"path":"/reference/build_hl7.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build HL7 character vector from segment functions — build_hl7","text":"character vector length equal number segment functions class 'hl7vector'","code":""},{"path":"/reference/build_hl7.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build HL7 character vector from segment functions — build_hl7","text":"","code":"build_hl7(MSH(), PID()) #> MSH|^~\\& #> PID"},{"path":"/reference/create_test_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for writing tests — create_test_text","title":"Helper for writing tests — create_test_text","text":"Sneaky way testing. Flatten segment element, fix names select list element (. $ trail numbers [[]]), create string use expect_equal(). cat() result paste test script. even sneaker thing parse text evaluate .  zz = create_test_text(segment) eval(parse(text = zz))","code":""},{"path":"/reference/create_test_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper for writing tests — create_test_text","text":"","code":"create_test_text(x)"},{"path":"/reference/create_test_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for writing tests — create_test_text","text":"x list, segment parsing","code":""},{"path":"/reference/datetime_to_hl7_datetime.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a date or datetime to HL7 datetime — datetime_to_hl7_datetime","title":"Convert a date or datetime to HL7 datetime — datetime_to_hl7_datetime","text":"Simple wrapper convert date/datetime without separators","code":""},{"path":"/reference/datetime_to_hl7_datetime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a date or datetime to HL7 datetime — datetime_to_hl7_datetime","text":"","code":"datetime_to_hl7_datetime(x)"},{"path":"/reference/datetime_to_hl7_datetime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a date or datetime to HL7 datetime — datetime_to_hl7_datetime","text":"x date/datetime, object class c(\"Date\", \"POSIXct\", \"POSIXt\")","code":""},{"path":"/reference/extract_field_separators.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract field separators from with the MSH segment of a HL7 message — extract_field_separators","title":"Extract field separators from with the MSH segment of a HL7 message — extract_field_separators","text":"usually default, , 'l; captured used parsing message","code":""},{"path":"/reference/extract_field_separators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract field separators from with the MSH segment of a HL7 message — extract_field_separators","text":"","code":"extract_field_separators(hl7_char)"},{"path":"/reference/extract_field_separators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract field separators from with the MSH segment of a HL7 message — extract_field_separators","text":"hl7_char character vector, lines HL7 message","code":""},{"path":"/reference/get_hl7_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract HL7 version ID from MSH segment — get_hl7_version","title":"Extract HL7 version ID from MSH segment — get_hl7_version","text":"Extract element 12.1 MSH segment. Version ID > Version ID","code":""},{"path":"/reference/get_hl7_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract HL7 version ID from MSH segment — get_hl7_version","text":"","code":"get_hl7_version(hl7_char)"},{"path":"/reference/get_hl7_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract HL7 version ID from MSH segment — get_hl7_version","text":"hl7_char character vector, character vector segments. first line interrogated.","code":""},{"path":"/reference/parse_hl7_character_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a HL7 character vector — parse_hl7_character_vector","title":"Parse a HL7 character vector — parse_hl7_character_vector","text":"work horse HL7 parsing","code":""},{"path":"/reference/parse_hl7_character_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a HL7 character vector — parse_hl7_character_vector","text":"","code":"parse_hl7_character_vector(hl7_char, name_fields = TRUE, dev_msg = F)"},{"path":"/reference/parse_hl7_character_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a HL7 character vector — parse_hl7_character_vector","text":"hl7_char character, character vector valid HL7 file name_fields boolean, whether name fields within segements dev_msg boolean, whether print package development messages","code":""},{"path":"/reference/parse_hl7_character_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a HL7 character vector — parse_hl7_character_vector","text":"list","code":""},{"path":"/reference/parse_hl7_message.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a HL7 2.x message — parse_hl7_message","title":"Parse a HL7 2.x message — parse_hl7_message","text":"Parse given HL7 file. Function validate input file parse single batch HL7 messages.","code":""},{"path":"/reference/parse_hl7_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a HL7 2.x message — parse_hl7_message","text":"","code":"parse_hl7_message(file)"},{"path":"/reference/parse_hl7_message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a HL7 2.x message — parse_hl7_message","text":"file file containing valid HL7 feed","code":""},{"path":"/reference/parse_hl7_message.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a HL7 2.x message — parse_hl7_message","text":"list","code":""},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/print.hl7segment.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom print methods for HL7 objects — print.hl7segment","title":"Custom print methods for HL7 objects — print.hl7segment","text":"Simply make things print noice.","code":""},{"path":"/reference/print.hl7segment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom print methods for HL7 objects — print.hl7segment","text":"","code":"# S3 method for hl7segment print(x, ...)"},{"path":"/reference/print.hl7segment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom print methods for HL7 objects — print.hl7segment","text":"x character, print ..., passed onto print importFrom base print","code":""},{"path":"/reference/print.hl7vector.html","id":null,"dir":"Reference","previous_headings":"","what":"importFrom base print — print.hl7vector","title":"importFrom base print — print.hl7vector","text":"importFrom base print","code":""},{"path":"/reference/print.hl7vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"importFrom base print — print.hl7vector","text":"","code":"# S3 method for hl7vector print(x, ...)"},{"path":"/reference/print.hl7vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"importFrom base print — print.hl7vector","text":"x character, print ..., passed onto print","code":""},{"path":"/reference/segment_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Segment field names — coded_element","title":"Segment field names — coded_element","text":"list segment (MSH, PID, etc) sub-field names (MessageType, PatientIdentifierList, etc). exhaustive. Used add_field_names(), simply matches names. Additional list objects used repetitive sub-field names, far: coded_element, extended_telecommunication_number, new ones included whenever need arises. Coded Element (CE) field structure","code":""},{"path":"/reference/segment_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Segment field names — coded_element","text":"","code":"coded_element  extended_telecommunication_number  segment_names"},{"path":"/reference/segment_names.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Segment field names — coded_element","text":"object class character length 6. object class character length 9. object class list length 23.","code":""},{"path":"/reference/segment_names.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Segment field names — coded_element","text":"coded_element: list field names coded element (CE) fields. Used segment_names recurring structure used identify value one possibly two different coding systems, e.g. lab might transmit value local coding also universal LOINC standard code. Described : http://www.hl7.eu/HL7v2x/v231/hl7v231typCE.htm extended_telecommunication_number: list field names Extended Telecommunication Number (XTN) fields. Used segment_names segment_names: actual list segment (MSH, PID, etc) sub-field names (MessageType, PatientIdentifierList, etc), calls upon lists described .","code":""},{"path":"/reference/split_segment.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a HL7 segment into respective fields — split_segment","title":"Split a HL7 segment into respective fields — split_segment","text":"function simply strsplit() routine, sub-components well.","code":""},{"path":"/reference/split_segment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a HL7 segment into respective fields — split_segment","text":"","code":"split_segment(   segment,   FieldSeparator = \"|\",   ComponentSeparator = \"^\",   SubcomponentSeparator = \"&\",   FieldRepeatSeparator = \"~\" )"},{"path":"/reference/split_segment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a HL7 segment into respective fields — split_segment","text":"segment character vector FieldSeparator character, splits ComponentSeparator character, splits SubcomponentSeparator character, splits FieldRepeatSeparator character, splits ","code":""},{"path":"/reference/strsplit_as_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for strsplit — strsplit_as_list","title":"Helper function for strsplit — strsplit_as_list","text":"Helps extract result strsplit return list","code":""},{"path":"/reference/strsplit_as_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for strsplit — strsplit_as_list","text":"","code":"strsplit_as_list(x, split)"},{"path":"/reference/strsplit_as_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for strsplit — strsplit_as_list","text":"x character vector split character, split, passed strsplit","code":""},{"path":"/reference/trim_trailing_chars.html","id":null,"dir":"Reference","previous_headings":"","what":"Trim trailing characters from character vector — trim_trailing_chars","title":"Trim trailing characters from character vector — trim_trailing_chars","text":"Trim trailing characters character vector","code":""},{"path":"/reference/trim_trailing_chars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trim trailing characters from character vector — trim_trailing_chars","text":"","code":"trim_trailing_chars(x, char)"},{"path":"/reference/trim_trailing_chars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trim trailing characters from character vector — trim_trailing_chars","text":"x character, string trim char character, character trim end string","code":""},{"path":"/reference/validate_hl7.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the headers of a HL7 file — validate_hl7","title":"Check the headers of a HL7 file — validate_hl7","text":"Function looks HL7 headers - FHS, BHS MSH - file responds appropriately.","code":""},{"path":"/reference/validate_hl7.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the headers of a HL7 file — validate_hl7","text":"","code":"validate_hl7(file)"},{"path":"/reference/validate_hl7.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the headers of a HL7 file — validate_hl7","text":"file input file","code":""},{"path":"/reference/variedComponents.html","id":null,"dir":"Reference","previous_headings":"","what":"Components of ObservationIdentifier — variedComponents","title":"Components of ObservationIdentifier — variedComponents","text":"Function create character vector length 1 input values separated ^","code":""},{"path":"/reference/variedComponents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Components of ObservationIdentifier — variedComponents","text":"","code":"variedComponents(..., .sep = \"^\")"},{"path":"/reference/variedComponents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Components of ObservationIdentifier — variedComponents","text":"... dots! .sep = '^'","code":""}]
